<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shed Layout Designer - TENET Tech</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: system-ui, sans-serif; background: #0a0a0a; color: #fff; }
        .container { max-width: 1200px; margin: 0 auto; padding: 2rem 1rem; }
        .back-link { color: #00ffff; text-decoration: none; margin-bottom: 2rem; display: inline-block; }
        .canvas-container { background: #1a1a1a; border: 2px solid #333; border-radius: 8px; margin: 2rem 0; }
        .canvas { width: 100%; height: 400px; background: repeating-linear-gradient(45deg, #0a0a0a, #0a0a0a 10px, transparent 10px, transparent 20px); cursor: crosshair; position: relative; }
        .controls { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 2rem; }
        .control-group { background: #1a1a1a; padding: 1.5rem; border-radius: 8px; border: 1px solid #333; }
        .control-group h3 { color: #00ffff; margin-bottom: 1rem; }
        .tool-button { background: #333; color: #fff; border: none; padding: 12px 16px; margin: 4px; border-radius: 6px; cursor: pointer; transition: all 0.3s; }
        .tool-button:hover, .tool-button.active { background: #00ffff; color: #000; }
        .item { position: absolute; border: 2px solid #00ffff; border-radius: 4px; cursor: move; display: flex; align-items: center; justify-content: center; font-size: 0.8rem; color: #00ffff; background: rgba(0, 255, 255, 0.1); user-select: none; }
        .item:hover { border-color: #ff6b6b; color: #ff6b6b; }
    </style>
</head>
<body>
    <div class="container">
        <a href="../../#apps" class="back-link">‚Üê Back to Portfolio</a>
        <h1 style="color: #00ffff; margin-bottom: 1rem;">Shed Layout Designer</h1>
        
        <div class="controls">
            <div class="control-group">
                <h3>Tools</h3>
                <button class="tool-button active" data-tool="workbench">Workbench</button>
                <button class="tool-button" data-tool="shelf">Shelf</button>
                <button class="tool-button" data-tool="toolbox">Toolbox</button>
                <button class="tool-button" data-tool="bike">Bike</button>
            </div>
            <div class="control-group">
                <h3>Actions</h3>
                <button class="tool-button" id="clear-all">Clear All</button>
                <button class="tool-button" id="save-layout">Save Layout</button>
            </div>
        </div>
        
        <div class="canvas-container">
            <div class="canvas" id="canvas"></div>
        </div>
    </div>
    
    <script>
        let selectedTool = 'workbench';
        let items = [];
        let dragOffset = { x: 0, y: 0 };
        let isDragging = false;
        let selectedItem = null;
        
        // Tool selection
        document.querySelectorAll('.tool-button[data-tool]').forEach(button => {
            button.addEventListener('click', () => {
                document.querySelectorAll('.tool-button[data-tool]').forEach(b => b.classList.remove('active'));
                button.classList.add('active');
                selectedTool = button.dataset.tool;
            });
        });
        
        // Canvas click handler
        document.getElementById('canvas').addEventListener('click', (e) => {
            if (isDragging) return;
            
            const rect = e.target.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            createItem(x, y);
        });
        
        function createItem(x, y) {
            const item = document.createElement('div');
            item.className = 'item';
            item.textContent = selectedTool;
            
            const size = getItemSize(selectedTool);
            item.style.left = `${x - size.width / 2}px`;
            item.style.top = `${y - size.height / 2}px`;
            item.style.width = `${size.width}px`;
            item.style.height = `${size.height}px`;
            
            document.getElementById('canvas').appendChild(item);
            items.push(item);
            
            // Make draggable
            item.addEventListener('mousedown', startDrag);
            item.addEventListener('touchstart', startDrag);
        }
        
        function getItemSize(type) {
            const sizes = {
                workbench: { width: 120, height: 60 },
                shelf: { width: 80, height: 40 },
                toolbox: { width: 60, height: 40 },
                bike: { width: 100, height: 50 }
            };
            return sizes[type] || { width: 80, height: 40 };
        }
        
        function startDrag(e) {
            isDragging = true;
            selectedItem = e.target;
            
            const rect = selectedItem.getBoundingClientRect();
            dragOffset.x = (e.clientX || e.touches[0].clientX) - rect.left;
            dragOffset.y = (e.clientY || e.touches[0].clientY) - rect.top;
            
            document.addEventListener('mousemove', drag);
            document.addEventListener('touchmove', drag);
            document.addEventListener('mouseup', stopDrag);
            document.addEventListener('touchend', stopDrag);
        }
        
        function drag(e) {
            if (!isDragging || !selectedItem) return;
            
            const canvas = document.getElementById('canvas');
            const rect = canvas.getBoundingClientRect();
            const x = (e.clientX || e.touches[0].clientX) - rect.left - dragOffset.x;
            const y = (e.clientY || e.touches[0].clientY) - rect.top - dragOffset.y;
            
            selectedItem.style.left = `${Math.max(0, Math.min(x, canvas.offsetWidth - selectedItem.offsetWidth))}px`;
            selectedItem.style.top = `${Math.max(0, Math.min(y, canvas.offsetHeight - selectedItem.offsetHeight))}px`;
        }
        
        function stopDrag() {
            isDragging = false;
            selectedItem = null;
            document.removeEventListener('mousemove', drag);
            document.removeEventListener('touchmove', drag);
            document.removeEventListener('mouseup', stopDrag);
            document.removeEventListener('touchend', stopDrag);
        }
        
        // Clear all items
        document.getElementById('clear-all').addEventListener('click', () => {
            items.forEach(item => item.remove());
            items = [];
        });
        
        // Save layout
        document.getElementById('save-layout').addEventListener('click', () => {
            const layout = items.map(item => ({
                type: item.textContent,
                x: parseInt(item.style.left),
                y: parseInt(item.style.top),
                width: parseInt(item.style.width),
                height: parseInt(item.style.height)
            }));
            
            localStorage.setItem('shed-layout', JSON.stringify(layout));
            alert('Layout saved!');
        });
    </script>
</body>
</html>